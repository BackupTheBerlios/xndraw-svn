

Xndraw is an artist's tool to create tilable shapes, patterns and wallpapers(and some other patterns based on rotational symmetry, like some used in Roman mosaic) by freehand drawing. 

./configure -h
./configure 
make
make install

Compilation and installation will place an executable, xndraw, in /usr/local/bin (unless some other prefix given), as well as some libraries and support files in $prefix/lib and $prefix/share 

Launching xndraw opens a gtkmm window containing a drawing interface, as well as various other junk. You can draw by placing clicks, freehand mouse movement, and bezier paths . As you draw you see the pattern develop, based on the lines input. You can set strokewidth, transparency, and (buggily) colour. 

Image output can be saved in png, and svg, and source paths can be read from and saved to svg.

A word of warning: this is pre-alpha software and many features don't work, and program crashes are liable to occur. The interface is as ugly as sin, and contains elements that may not work, or even make sense.

What there isn't(but should be):
boolean operations (that cairo doesnt provide!): mostly done, but some underlying calls need fixing(each SubPath needs to calculate an OR path to find is_outside() correctly)
ability to create and identify a tilable shape
usable history(so you can create same pattern twice - including the stroke/colour etc settings etc)
 

It should be intuitively easy, and a joy to use, but also versatile and capable enough to be a useful tool, to, for example, create a tile shape for use by a ceramicist, which can itself be further subdivided(perhaps with  a different pattern) and/or decorated. It will be then able to create useful output (in svg, and png), whether for use as a manual blank, or as input to an automated process. It will understand the idea of an assembly of contiguous shapes filling a plane, or area.

With wallpapers it will allow the creation of variations, in terms of colour, stroke, and transparency, and shape(s), and pattern(like the decoration of tiles)

xndraw has many warts and wrinkles as I was an utter novice coder at the start, and is no doubt still pretty idiosyncratic, as I am self-taught. You are free to use and improve xndraw as a free, open-source software, under GPL (or possibly a BSD style license also, if I get the notices for that together)

In any case, xndraw would benefit from the input of other minds, both to share the load, (and edit out the mistakes and false starts) but also to add insight and ideas.

as well as drawing(with 'clicks', freehand drawing, and beziers), yu can import(svg, and 'native') save(svg, and native) and edit(rotate, scale, move) paths used to generate the pattern , which is various approaches to rotational symmetry around one or more points, like Escher meeting Etch-a-sketch. Currently mostly flat color, though gradients, and bitmaps can also be used(but currently the patternsource isn't transformed like the paths themselves are, due to an unforseen wrinkle: I'll fix when I can - unless some other blessed spirit does first!

3,4,and 6 way patterns can be generated, around which any number of lines can be rotated

Baffled?

xndraw came into being as follows. I was working at a festival helping Guy Crossley, a mid-north coast ceramicist who was running a ceramic and mosaic tent for and with the festival goers. I was helping the kids making hexagonal and pentagonal tiles, for a 'soccer ball' sculpture, turning out the blanks, and remediating tiles to try and get them through the furnace intact. But I became fascinated with a leaping fish tile Guy had a mould for, which, rotated in 3 orientations, assembled seemlessly, and stunningly over a flat surface -shades of Escher - but how the hell could you visualise a tileable design with rotational symmetry.

As an artist with many years experience, including with various computer image and 3d editors, but an almost total novice programmer, but with some longstanding aspiration to learn, this hooked me. I'd just discovered freebsd,  and linux, which had reawakened my interest in computing as more than a means of image reproduction, after too many CAPS letter contracts from Adobe et al had sapped my interest in commercial software product, and the consumerist model of software they were pursuing, which forced you to use these tools in a prescribed way withoutany means of tinkering and adjusting. In fact I'd seen how FreeHand, one of my favourite programs, had deteriorated between versions 3 and 7(eg, parameterised blends had been replaced with some consumer-optimised, one-size-fits-all method), before it was killed entirely. I'd never liked Illustrator. Early versions were obsessed about generating pie-sharts from spreadsheet data - not my scene

Seeing these Escher-y patterns like the leaping fish made me wonder, how the hell do you actually design these things, when it seemed impossible to visualise. It seemed that doodling couldn't help, except if the doodles were cloned and transmogrified according to the rules of the pattern. Definitely a job for a computer. Watching freebsd systems compile themselves I'd become hypnotised by all the make and gcc output, I'd become obsessed about learning how to create a non-trivial program. I'd learn how myself, and seeing the wealth of free tools, and free, if mixed quality, advice available on the forums, current and archived, I was confident I could do it(Fools rush in ... I now know that the 'labour-saving' aspect of computers only applies if someone else writes the source. A long ago and incomplete honours course in history had schooled me in self-directed research. I found the textbooks of Bruce Eckel(Thinking in C++ and so on), and set about learning the basics.

It didn't take long to decide to use gtkmm and cairomm. Thanks to the gimp etc, gtk was available widely, and could run on windows. Cairo was becoming integrated into it. C++ came much more naturally to me than C, as an artist I was used to thinking in the round, in terms of the complete object. Which is not to say the objects I created initially (or even now)were any good. I guess some were, and many also weren't, stupidly and unnecessarily wrapping some wrapper I could call directly, or keeping multiple different data which all refer to the same 'object', easily muddled. Others were just ill-conceived or didn't work, or I bit off more than could be comfortably chew, sometimes losing the thread, especially early on, when each line was a mind-boggler

All the same I had a kind of prototype after 6 months, which only drew a 3-way pattern, and was extremely slow, and drew straight segments between clicks(ie button presses) only. It also tended to die in all sorts of horrible ways, and the expose handler was stuffed so if the window was dirtied by anything overlying it stayed that way until you drew some more. Things are much improved since xndraw's first iteration, But don't be misled by the version(2.4.1 as I write), 0.2.4 would be as good an indication of the release-readiness of the work

Since that time it has been rewritten a couple of times, with functionality split out into separate libraries. It's a lot faster,you can draw in freehand, as well as withbezier splines , save output in png and svg, as well as import and save source paths. but much is broken still due to a habit of mission creep as well as launching into to large chunks of work without detailed written plans - another artist's habit. And the gui is an absolute mess, with a lot of spuriou
s buttons. And threading is an unsafe mess

What remains to do:  properly define shape classes with methods to determine if a point is inside, whether shape is tileable, whether a subshape can be tiled into it(including with rotation). This can be done with the eye now, and by saving output, blanks for a tileable shape, or set of tileable shapes, can be obtained. But if the software can determine this itself, more flexibility, more useful, more like a tool, and not just a fun, but frustrating toy? 

     todo:work out just what calls the opsequence recorder(it records Drawingbase calls, with their arguments) needs to track to create a useful sequence of actions to create a pattern

I'd like to create a self-bootstrapping 'image-share-and-edit cloud' lib, where (1 or more)peers create, composite and share(for reading and/or writing) layers etc of an image, without any notion of a central server, although proxy servers could allow sharable elements to be available when the cloudowners' devices are all offline. Each layer or other element or metadata with its own ownership and sharing. Setting up clientserver for interprocess and inter system operation, ie to be able to share an image over a transitory, or longlived, peercloud, and work or play collaboratively with it, whether in xndraw, and/or other tools.

 Important fixes is fix threading so important resources all have locks which are used in all the calls to them, without getting themselves wedged by bad design. 
Then much more of calc and rendering can be done on background, keeping the gui always responsive
john o'driscoll - subgeometer@berlios.de
